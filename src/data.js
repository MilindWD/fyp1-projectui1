const datasets = ['SENTIMENT140', 'IMDb50', 'CAA_NRC'];

const models = ['Logistic Regression', 'SVM', 'DecisionTreeClassifier', 'LSTM', 'DNN', 'GRU'];

const embeddings = ['Bag of Words', 'tfidf', 'GloVe', 'Word2Vec', 'fastText'];

const attributes = ['accuracy','f1', 'precision', 'recall'];


let raw = `0.75044,0.7500798747,0.7516659447,0.7516659447,0.55748,0.536216756,0.5693766503,0.5568342212,0.68308,0.6830495601,0.6832083198,0.6831161051,0.50152,0.334008205,0.25076,0.5,0. 73896,0.7383203729,0.7416248415,0.7391171282,0.49848,0.3326570925,0.24924,0.5,0.75964,0.7594769057,0.7601911986,0.759567858,0,0,0,0,0.6866,0.6865586914,0.686643783,0.6865714458,0,0,0,0,0,0,0,0,0,0,0,0,0.52588,0.516229387,0.5276113292,0.5254554864,0.50568,0.4215946466,0.5106953805,0.5045255714,0.53988,0.5398328723,0.5398656499,0.5398542243,0.75056,0.7492890358,0.7562004235,0.7507833864,0.72192,0.7216086935,0.7231170545,0.7220283303,0.73776,0.7362493782,0.7428775742,0.7375367488,0.53812,0.5378384963,0.5381314061,0.5380499452,0.50528,0.3748853636,0.5227618749,0.503896228,0.55408,0.5540799886,0.5540857178,0.554085607,0.74808,0.7480392332,0.7483247084,0.7481255827,0.73196,0.731948605,0.7320444405,0.7319865855,0.7598,0.7597996307,0.7598163071,0.7598107915,0.54648,0.5431071041,0.5475791167,0.5462238512,0.50944,0.4064928704,0.5262778273,0.5081785972,0.56584,0.56582826,0.5658323789,0.5658294212,0.7948,0.7945313404,0.7965989712,0.7949172727,0.50152,0.334008205,0.25076,0.5,0.79356,0.7933360328,0.7950646182,0.7936674116,0.87504,0.8749931462,0.8750758031,0.8749456488,0.66024,0.6527568263,0.6714883695,0.6582013513,0.72424,0.7242357625,0.7243034944,0.7243420502,0.49256,0.3300101838,0.24628,0.5,0.86136,0.8613566983,0.8614075669,0.8614781293,0.58408,0.5838606273,0.5839299273,0.5838676319,0.89136,0.8912931409,0.8915737169,0.8911882979,0.88624,0.8861726754,0.8864292536,0.886074308,0.72072,0.7207124481,0.7207577619,0.72080222,0.50744,0.3366236799,0.25372,0.5,0.86224,0.8622206853,0.862202577,0.8622547364,0.52856,0.5178265095,0.5342524921,0.5308976444,0.514,0.5139213533,0.5143232662,0.5143031477,0.50984,0.4914183052,0.5082181763,0.5071203221,0.51712,0.517076965,0.5170905134,0.5170940249,0.81584,0.8157909373,0.8158074768,0.8157777833,0.49256,0.3300101838,0.24628,0.5,0.82512,0.8250734096,0.8250904048,0.8250598385,0.55272,0.5527182109,0.5528793163,0.5528721739,0.5312,0.5229889998,0.5312745207,0.529364953,0.52008,0.5200693079,0.5201210691,0.5201249295,0.85512,0.8549677509,0.8556348395,0.854827159,0.8332,0.8331985386,0.8332934197,0.8333404688,0.8464,0.8463195491,0.846500667,0.8462469169,0.55352,0.5534739071,0.5538486086,0.5537937987,0.50616,0.4883997236,0.5040117367,0.5034990403,0.53384,0.5338119273,0.5338352523,0.5338427317,0.85144,0.8503863358,0.8586942617,0.8503795567,0.78312,0.7812589031,0.7963827977,0.7846662676,0.85624,0.8561159706,0.8587308145,0.8568665994,0.7113402062,0.7019643418,0.7154180725,0.692686189,0.6829896907,0.6720536109,0.6703993893,0.6752777521,0.6443298969,0.6364779444,0.6421029719,0.6324560345,0.4548969072,0.2084440508,0.1516323024,0.3333333333,0.7113402062,0.7000236035,0.704938943,0.6962638437,0.4548969072,0.2084440508,0.1516323024,0.3333333333,0.7190721649,0.7025551522,0.7495021211,0.6832980508,0.7229381443,0.7116350463,0.7485395878,0.6938776158,0.6108247423,0.6002463159,0.6035561975,0.5976870771,0.4548969072,0.2084440508,0.1516323024,0.3333333333,0.7268041237,0.7115265166,0.7333461664,0.6997726611,0.4548969072,0.2084440508,0.1516323024,0.3333333333,0.4239690722,0.3119909647,0.3719074145,0.3408980229,0.425257732,0.260367573,0.2471507353,0.3240299597,0.449742268,0.4232727988,0.4228822372,0.4237273586,0.6726804124,0.658801445,0.6738099043,0.6493343559,0.4548969072,0.2084440508,0.1516323024,0.3333333333,0.6456185567,0.6340891672,0.6389776808,0.6322481726,0.4690721649,0.4281873152,0.4374796357,0.4327835925,0.3930412371,0.3648130554,0.3783185865,0.3644263065,0.493556701,0.4892169453,0.4942556083,0.4860766924,0.6713917526,0.6472742734,0.7067465653,0.6348213413,0.6572164948,0.6293156059,0.6691520963,0.6168100374,0.6701030928,0.6509449803,0.6709904088,0.6400174172,0.4317010309,0.3254318876,0.3989028319,0.3506875101,0.4239690722,0.2984136234,0.3914358625,0.3356074643,0.4768041237,0.4543339305,0.4566768726,0.4526227317,0.6701030928,0.662330242,0.684903517,0.6506291738,0.6572164948,0.6433578747,0.6618010159,0.6328788446,0,0,0,0`;
raw = raw.split(',');

const data = [];

const makeData = () => {
    for(let i=0;i<raw.length;i++) {
        const temp={};
        temp.value = parseFloat(raw[i]);
        temp.dataset = datasets[parseInt(i/120)];
        temp.model = models[parseInt(i/4)%6];
        temp.embedding = embeddings[parseInt(i/24)%5];
        temp.attribute = attributes[i%4];
        data.push(temp);
    }
}

makeData();

const getData = (model, dataset, attribute) => {

    

    if(model==='All') {
        const temp = [];
        models.forEach(model => {
            temp.push({name: model});
        });
        for(let i=0;i<data.length;i++) {
            if(data[i].attribute===attribute&&data[i].dataset===dataset) {
                for(let j=0;j<6;j++) {
                    if(temp[j].name===data[i].model) {
                        temp[j][data[i].embedding] = data[i].value;
                    }
                }
            }
        }
        return temp;
    }

    else if(dataset==='All') {
        const temp = [];
        datasets.forEach(set => {
            temp.push({name: set});
        });
        for(let i=0;i<data.length;i++) {
            if(data[i].attribute===attribute&&data[i].model===model) {
                for(let j=0;j<3;j++) {
                    if(temp[j].name===data[i].dataset) {
                        if(data[i].embedding)
                        temp[j][data[i].embedding] = data[i].value;
                    }
                }
            }
        }
        console.log(temp);
        return temp;
    }

    else {
        const temp = [];
        embeddings.forEach(embedding => {  
            temp.push({name: embedding});
        });

        for(let i=0;i<data.length;i++) {
            if(data[i].model === model && data[i].dataset === dataset) {
                for(let j=0;j<5;j++) {
                    if(temp[j].name===data[i].embedding) {
                        temp[j][data[i].attribute] = data[i].value;
                    }
                }
            }
        }
        return temp;
    }
}

export default getData;